/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package com.aldrin.ums.gui.dialog;

import com.aldrin.ums.config.HibernateConfig;
import com.aldrin.ums.dao.impl.UserDAOImpl;
import com.aldrin.ums.entity.User;
import com.formdev.flatlaf.FlatClientProperties;
import com.formdev.flatlaf.ui.FlatTextFieldUI;
import java.awt.Color;
import java.util.HashMap;
import java.util.Locale;
import java.util.Map;
import javax.swing.BorderFactory;
import javax.swing.UIManager;
import javax.swing.border.Border;

/**
 *
 * @author ALDRIN B. C.
 */
public class JDialogChangePassword extends javax.swing.JDialog {

    private User user;
    private static boolean currentPassword = false;
    private static boolean reTypePassword = false;

    /**
     * Creates new form JDialogChangePassword
     */
    public JDialogChangePassword(java.awt.Frame parent, boolean modal, User user) {
        super(parent, modal);
        initComponents();
        jButtonChangePassword.setEnabled(false);
        this.user = user;
        jTextFieldUsername.setText(user.getUsername());
        jPasswordFieldCurrentPassword.putClientProperty(FlatClientProperties.PLACEHOLDER_TEXT, "Current Password");
        jPasswordFieldNewPassword.putClientProperty(FlatClientProperties.PLACEHOLDER_TEXT, "New Password");
        jPasswordFieldReTypeNewPassword.putClientProperty(FlatClientProperties.PLACEHOLDER_TEXT, "Re-type new Password");
//        getRootPane().putClientProperty(FlatClientProperties.TITLE_BAR_BACKGROUND, new Color(70, 130, 180));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jTextFieldUsername = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jPasswordFieldReTypeNewPassword = new javax.swing.JPasswordField();
        jLabel3 = new javax.swing.JLabel();
        jPasswordFieldCurrentPassword = new javax.swing.JPasswordField();
        jLabel4 = new javax.swing.JLabel();
        jPasswordFieldNewPassword = new javax.swing.JPasswordField();
        jButtonChangePassword = new javax.swing.JButton();
        jLabelErrorMessage = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Change Password");
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setText("RE-TYPE NEW PASSWORD");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 230, 330, -1));

        jTextFieldUsername.setEditable(false);
        jTextFieldUsername.setPreferredSize(new java.awt.Dimension(7, 28));
        getContentPane().add(jTextFieldUsername, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 90, 330, -1));

        jLabel2.setText("USERNAME");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 70, 330, -1));

        jPasswordFieldReTypeNewPassword.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jPasswordFieldReTypeNewPasswordKeyReleased(evt);
            }
        });
        getContentPane().add(jPasswordFieldReTypeNewPassword, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 250, 330, 30));

        jLabel3.setText("CURRENT PASSWORD");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 120, 330, -1));

        jPasswordFieldCurrentPassword.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jPasswordFieldCurrentPasswordKeyReleased(evt);
            }
        });
        getContentPane().add(jPasswordFieldCurrentPassword, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 140, 330, 30));

        jLabel4.setText("NEW PASSWORD");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 180, 330, -1));

        jPasswordFieldNewPassword.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jPasswordFieldNewPasswordKeyReleased(evt);
            }
        });
        getContentPane().add(jPasswordFieldNewPassword, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 200, 330, 30));

        jButtonChangePassword.setText("Save");
        jButtonChangePassword.setPreferredSize(new java.awt.Dimension(77, 32));
        jButtonChangePassword.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonChangePasswordActionPerformed(evt);
            }
        });
        getContentPane().add(jButtonChangePassword, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 290, 240, -1));

        jLabelErrorMessage.setFont(new java.awt.Font("Courier New", 0, 14)); // NOI18N
        jLabelErrorMessage.setForeground(new java.awt.Color(0, 102, 51));
        jLabelErrorMessage.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        getContentPane().add(jLabelErrorMessage, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 30, 330, 30));

        setSize(new java.awt.Dimension(366, 376));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jPasswordFieldCurrentPasswordKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jPasswordFieldCurrentPasswordKeyReleased
        if (jPasswordFieldCurrentPassword.getText().equals(user.getPassword().toString())) {
            jPasswordFieldCurrentPassword.putClientProperty("JComponent.outline", "success");
            setCurrentPassword(true);
            validateFields();

        } else {
            setCurrentPassword(false);
            validateFields();
            jPasswordFieldCurrentPassword.putClientProperty("JComponent.outline", "error");
        }

    }//GEN-LAST:event_jPasswordFieldCurrentPasswordKeyReleased

    private void jPasswordFieldNewPasswordKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jPasswordFieldNewPasswordKeyReleased

    }//GEN-LAST:event_jPasswordFieldNewPasswordKeyReleased

    private void jPasswordFieldReTypeNewPasswordKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jPasswordFieldReTypeNewPasswordKeyReleased
        if (jPasswordFieldNewPassword.getText().toString().equals(jPasswordFieldReTypeNewPassword.getText().toString())) {
            jPasswordFieldReTypeNewPassword.putClientProperty("JComponent.outline", "success");
            setReTypePassword(true);
            validateFields();
        } else {
            setReTypePassword(false);
            validateFields();
            jPasswordFieldReTypeNewPassword.putClientProperty("JComponent.outline", "error");
        }
    }//GEN-LAST:event_jPasswordFieldReTypeNewPasswordKeyReleased

    private void jButtonChangePasswordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonChangePasswordActionPerformed
        UserDAOImpl userDAOImpl = new UserDAOImpl();
        HibernateConfig hibernateConfig = new HibernateConfig();
        user.setPassword(jPasswordFieldReTypeNewPassword.getText());
        userDAOImpl.changePassword(user, hibernateConfig.getEntityManager());
        jLabelErrorMessage.setText("New password is successfully saved.");
        jButtonChangePassword.setEnabled(false);
    }//GEN-LAST:event_jButtonChangePasswordActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonChangePassword;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabelErrorMessage;
    private javax.swing.JPasswordField jPasswordFieldCurrentPassword;
    private javax.swing.JPasswordField jPasswordFieldNewPassword;
    private javax.swing.JPasswordField jPasswordFieldReTypeNewPassword;
    private javax.swing.JTextField jTextFieldUsername;
    // End of variables declaration//GEN-END:variables
private void validateFields() {
        if (isCurrentPassword() == true && isReTypePassword() == true) {
            jButtonChangePassword.setEnabled(true);
        } else {
            jButtonChangePassword.setEnabled(false);
        }
    }

    /**
     * @return the currentPassword
     */
    public static boolean isCurrentPassword() {
        return currentPassword;
    }

    /**
     * @param aCurrentPassword the currentPassword to set
     */
    public static void setCurrentPassword(boolean aCurrentPassword) {
        currentPassword = aCurrentPassword;
    }

    /**
     * @return the reTypePassword
     */
    public static boolean isReTypePassword() {
        return reTypePassword;
    }

    /**
     * @param aReTypePassword the reTypePassword to set
     */
    public static void setReTypePassword(boolean aReTypePassword) {
        reTypePassword = aReTypePassword;
    }

}
